1. Quando devemos aplicar o padrão Template Method?
Quando temos classes com códigos muito parecidos (estrutura pacida), mas com alguma especificações diferentes. Assim, devemos construir um algoritmo geral com etapas variadas (métodos), permitindo que se evite a duplicação de código e a organização. Desta forma, nossas classes abstratas podem subescrever os métodos necessários e até mesmo os métodos que não são necessários, caso acabe precisando.

2. Será que o Template Method poderia ser usado em conjunto com o Chain of Responsibility? Como?
Sim, a utilização do Template Method em conjunto com o Chain of Responsibility é possível e pode ser útil, já que podemos realizar toda a construção do padrão template, implementando os métodos padrões e abstratos e, além disso, realizar a chamada de outras classes em cada subclasse utilizando o padrão chain of Responsibiliti. Assim, podemos contruir uma cadeia de chamadas que fazem sentido para o nosso usuário, ou que podem ser construídos por nosso usuário, possibilitando uma maior flexibilidade, reutilização e organização. No meu entendimento, o Chain os Responsibility entraria como um substituto para a sequencia de etapas pré definida no nosso Template Method, ou um complemento para ela, já que, dependendo as condições, podemos realizar um redirecionamento mais adequado.
 
4. Por que ao invés do Builder, não usar um conjunto de construtores nesse objeto, que fariam a mesma coisa que o Builder? Discuta vantagens e desvantagens de se usar diversos construtores ao invés do Builder.
A construção de diversos construtores só é possível em linguagens que suportam a sobrecarga de métodos, como C# e Java, e sua utilização acabaria por o nosso código muito sobrecarregado de informação. Para evitar isso, quando nosso construtor tiver muitos parâmetros, devemos utilizar o padrão Builder, que possibilita a separação da construção de objetos complexos das respectivas representações, de tal forma que o mesmo processo  de construção possar criar diferentes objetos.

Ao utilizar diversos construtores ao invés do padrão Builder, teríamos uma sintaxe mais simples e direta, mas, com o aumento dos atributos, acabaríamos tendo dificuldades para realizar a chamada ao contrutor e para compeender o código. Em continuidade, os construtores são familiares para os desenvolvedores, mas que, ao adicionar novos atributos posteriores, pode acabar necessitando a modificação de vários construtores e evidenciando fragilidades. Por fim, os construtores oferecem controle sobre a inicialização de cada atributo, permitindo definir valores padrões e validações específicas. Apesar disso, a ordem de inicialização dos atributos é fixa, o que pode ser um problema se a ordem for crucial ou precisar ser alterada por alguma nova regra.

5. Quando podemos aplicar o padrão Builder? E quando ele mais atrapalhará do que ajudará?
O padrão Builder dever ser utilizado para se livrar de "construtores telecópico", que consistem no encadeamento de construtores. Além disso, o padrão deve ser utilizado quando queremos criar diferentes representações de um mesmo produto. Esse padrão começará a atrapalhar quando for necessário criar inúmeras classes novas e a houver a criação de novos objetos de foma recorrente, ocasionando problemas de peformance. Além disso, o seu uso não se torna necessário quando estamos trabalhando com construção de objetos simples. Por fim, é necessário verificar se o código continua intuitivo com a aplicação do Builder, já que sua utilização pode aumentar a abstração e deixar o código mais complexo.

6. Compare os padrões Builder e StepBuilder. Descreva um cenário em que seria mais vantajoso
usar o padrão StepBuilder.
Tanto o Builder como o StepBuilder surgem com o objetivo de facilitar a criação de objetos complexos com diversos atributos, apesar disso, ao utilizar a Interface Fluente, percebemos alguns problemas que o Builder tradicional pode ocasionar. A Interface Fluente permite deixar a forma de uso da nossa classe mais clara e explicativa. Entretanto, ao utilizar os métodos na ordem errada, nossa interface ficará não fluente e suscetível a possíveis erros. Aqui que entra o stepBuilder, objetivando guiar o usuário corretamente para a criação de um objeto, não permitindo o esquecimento de alguma etapa crucial para a correta construção. Assim, o StepBuilder funciona simplesmente encadeando interfaces, cada uma representando um passo na criação de um objeto ou execução de uma ação.

Os cenários de utilização do stepBuilder consistem em situações em que é necessário estabelecer uma sequência bem definida de etapas necessárias para a construção de um objeto. Um exemplo disso pode ser o processo de emitir e gerar umam nota fiscal. As etapas devem ser bem definidas para que tudo seja bem construídos. Portando, para emitir a nota fiscal, devemos passar uma identificação do cliente, o nome, os produtos e suas quantidades e, por fim, gerar a nota fiscal. Desta forma, temos uma interface fluente trabalhando com etapas de criação.