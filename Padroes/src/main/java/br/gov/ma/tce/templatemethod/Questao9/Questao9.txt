9. Suponha que você esteja desenvolvendo um sistema para construir carros com diferentes
especificações (por exemplo, sedan, SUV, esportivo) usando os padrões Template Method e
Builder:
● Template Method (CarBuilder):
● Uma classe base CarBuilder pode definir um método de template buildCar() que
encapsula o processo comum de construção de um carro (por exemplo, montagem
do chassi, instalação do motor, configuração dos recursos).
● O método de template buildCar() pode chamar métodos abstratos como
buildChassis(), installEngine(), setupFeatures() para personalizar a
construção do carro.

● Builder Concreto (SedanBuilder, SUVBuilder, SportsCarBuilder):
● Cada classe concreta de Builder (por exemplo, SedanBuilder, SUVBuilder,
SportsCarBuilder) implementa os métodos abstratos definidos pelo Template
Method para construir carros específicos.
● Por exemplo, SedanBuilder pode implementar buildChassis() para construir um
chassi de sedan, installEngine() para instalar um motor adequado para sedan, etc.

Esboce o código para solucionar esse problema
Comente o que ganhamos com a sinergia no uso dos dois padrões: Template Method e Builder

A utilização do Template Method em conjunto do Builder grande maior flexibilidade, reutilização e extensividade, uma vez que adotamos um template de construção que facilitará a criação dos objetos e um Builder que possibilita a criação de direntes tipos de carros utilizando um "interface" unificada e reutilizável, Garantindo maior entendimento e flexibilidade para futuras modificações.    